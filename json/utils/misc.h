// =============================================================================
// <utils/misc.h>
//
// Internal JSON processing utility functions.
//
// Copyright Kristian Garn√©t.
// -----------------------------------------------------------------------------

#ifndef H_D116F7C713D04697B5D21C4D7394897C
#define H_D116F7C713D04697B5D21C4D7394897C

// -----------------------------------------------------------------------------

#include <quantum/hash.h>

// -----------------------------------------------------------------------------
// USON Base64
// -----------------------------------------------------------------------------

static const u8 uson_base64_pad = '.';

static const u8 uson_base64_set[64] =
{
  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
  'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
  'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
  'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',
  'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',
  'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
  'w', 'x', 'y', 'z', '0', '1', '2', '3',
  '4', '5', '6', '7', '8', '9', '-', '_'
};

static const u8 uson_base64_tbl[256] =
{
  255, 255, 255, 255, 255, 255, 255, 255, // 0
  255, 255, 255, 255, 255, 255, 255, 255, // 8
  255, 255, 255, 255, 255, 255, 255, 255, // 16
  255, 255, 255, 255, 255, 255, 255, 255, // 24
  255, 255, 255, 255, 255, 255, 255, 255, // 32
  255, 128, 255, 255, 255,  62,  64, 255, // 40
   52,  53,  54,  55,  56,  57,  58,  59, // 48
   60,  61, 255, 255, 255, 255, 255, 255, // 56
  255,   0,   1,   2,   3,   4,   5,   6, // 64
    7,   8,   9,  10,  11,  12,  13,  14, // 72
   15,  16,  17,  18,  19,  20,  21,  22, // 80
   23,  24,  25, 255, 255, 255, 255,  63, // 88
  255,  26,  27,  28,  29,  30,  31,  32, // 96
   33,  34,  35,  36,  37,  38,  39,  40, // 104
   41,  42,  43,  44,  45,  46,  47,  48, // 112
   49,  50,  51, 255, 255, 255, 255, 255, // 120
  REPEAT64 (255), REPEAT64 (255)          // 128
};

// -----------------------------------------------------------------------------
// Identifiers
// -----------------------------------------------------------------------------

static const u8 uson_ident_tbl[256] =
{
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // 0
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // 8
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // 16
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // 24
  0x00u, 0x05u, 0x00u, 0x01u, 0x05u, 0x01u, 0x05u, 0x05u, // 32
  0x00u, 0x00u, 0x05u, 0x07u, 0x05u, 0x07u, 0x07u, 0x05u, // 40
  0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, // 48
  0x07u, 0x07u, 0x00u, 0x04u, 0x01u, 0x05u, 0x01u, 0x01u, // 56
  0x05u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, // 64
  0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, // 72
  0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, // 80
  0x07u, 0x07u, 0x07u, 0x00u, 0x01u, 0x00u, 0x01u, 0x05u, // 88
  0x01u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, // 96
  0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, // 104
  0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, 0x07u, // 112
  0x07u, 0x07u, 0x07u, 0x00u, 0x01u, 0x00u, 0x05u, 0x00u, // 128
  REPEAT64 (0x01u), REPEAT64 (0x01u)                      // 128
};

#define uson_chr_ident(c) (uson_ident_tbl[c] & 1u)

#define uson_chr_scheme(c) ((uson_ident_tbl[c] >> 1) & 1u)
#define uson_chr_mime(c) (uson_ident_tbl[c] >> 2)

#define uson_chr_verb_id uson_chr_scheme

// -----------------------------------------------------------------------------

static const u8 uson_verb_tbl[256] =
{
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // 0
  0x00u, 0x01u, 0x00u, 0x00u, 0x00u, 0x01u, 0x00u, 0x00u, // 8
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // 16
  0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, // 24
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 32
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 40
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 48
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 56
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 64
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 72
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 80
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 88
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 96
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 104
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, // 112
  0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x01u, 0x00u, // 120
  REPEAT64 (0x01u), REPEAT64 (0x01u)                      // 128
};

#define uson_chr_verb(c) uson_verb_tbl[c]

// -----------------------------------------------------------------------------
// String validation
// -----------------------------------------------------------------------------

static const u8 json_str_tbl[256] =
{
  REPEAT16 (0), REPEAT16 (0), // 0
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 32
  REPEAT16 (1), REPEAT16 (1), // 48
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 80
  REPEAT16 (1), REPEAT16 (1), // 96
  REPEAT64 (1), REPEAT64 (1) // 128
};

#define json_chr_string(c) json_str_tbl[c]

// -----------------------------------------------------------------------------

static const u8 uson_str_tbl[256] =
{
  REPEAT16 (0), REPEAT16 (0), // 0
  1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 32
  REPEAT16 (1), REPEAT16 (1), // 48
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, // 80
  REPEAT16 (1), // 96
  // 7F DEL control character is explicitly forbidden
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, // 112
  REPEAT64 (1), REPEAT64 (1) // 128
};

#define uson_chr_string(c) uson_str_tbl[c]

// -----------------------------------------------------------------------------
// String unescaping
// -----------------------------------------------------------------------------

static const u8 json_unescape_tbl[256] =
{
  255, 255, 255, 255, 255, 255, 255, 255, // 0
  255, 128, 128, 255, 255, 128, 255, 255, // 8
  255, 255, 255, 255, 255, 255, 255, 255, // 16
  255, 255, 255, 255, 255, 255, 255, 255, // 24
  128, 255, '"', 255, 255, 255, 255, 255, // 32
  255, 255, 255, 255, 255, 255, 255, '/', // 40
  255, 255, 255, 255, 255, 255, 255, 255, // 48
  255, 255, 255, 255, 255, 255, 255, 255, // 56
  255, 255, 255, 255, 255, 255, 255, 255, // 64
  255, 255, 255, 255, 255, 255, 255, 255, // 72
  255, 255, 255, 255, 255, 255, 255, 255, // 80
  255, 255, 255, 255,'\\', 255, 255, 255, // 88
  255, 255,'\b', 255, 255, 255,'\f', 255, // 96
  255, 255, 255, 255, 255, 255,'\n', 255, // 104
  255, 255,'\r', 255,'\t', 255, 255, 255, // 112
  255, 255, 255, 255, 255, 255, 255, 255, // 120
  REPEAT64 (255), REPEAT64 (255)          // 128
};

#define json_chr_unescape(c) json_unescape_tbl[c]

// -----------------------------------------------------------------------------

static const u8 uson_unescape_tbl[256] =
{
  255, 255, 255, 255, 255, 255, 255, 255, // 0
  255, 128, 128, 255, 255, 128, 255, 255, // 8
  255, 255, 255, 255, 255, 255, 255, 255, // 16
  255, 255, 255, 255, 255, 255, 255, 255, // 24
  128, 255, '"', 255, 255, 255, 255, 255, // 32
  255, 255, 255, 255, 255, 255, 255, 255, // 40
  255, 255, 255, 255, 255, 255, 255, 255, // 48
  255, 255, 255, 255, 255, 255, 255, 255, // 56
  255, 255, 255, 255, 255, 255, 255, 255, // 64
  255, 255, 255, 255, 255, 255, 255, 255, // 72
  255, 255, 255, 255, 255, 255, 255, 255, // 80
  255, 255, 255, 255,'\\', 255, 255, 255, // 88
  255, 255, 255, 255, 255, 255, 255, 255, // 96
  255, 255, 255, 255, 255, 255,'\n', 255, // 104
  255, 255,'\r', 255,'\t', 255, 255, 255, // 112
  255, 255, 255, 255, 255, 255, 255, 255, // 120
  REPEAT64 (255), REPEAT64 (255)          // 128
};

#define uson_chr_unescape(c) uson_unescape_tbl[c]

// -----------------------------------------------------------------------------
// String escaping
// -----------------------------------------------------------------------------

static const u8 json_escape_tbl[256] =
{
  3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 3, 2, 2, 3, 3, // 0
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, // 16
  0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, // 32
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, // 48
  REPEAT16 (0),                                   // 64
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, // 80
  REPEAT16 (0),                                   // 96

  // Always escape the 7F DEL control character,
  // even in JSON mode
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, // 112

  REPEAT64 (0), REPEAT64 (0)                      // 128
};

#define json_chr_escape(c) json_escape_tbl[c]

// -----------------------------------------------------------------------------

static const u8 uson_escape_tbl[256] =
{
  // Backspace and form feed characters
  // are escaped using the hexadecimal sequence
  3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 3, 3, // 0
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, // 16
  // Do not escape the solidus character unnecessarily
  0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 32
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, // 48
  REPEAT16 (0),                                   // 64
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, // 80
  REPEAT16 (0),                                   // 96

  // Always escape the 7F DEL control character,
  // even in JSON mode
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, // 112

  REPEAT64 (0), REPEAT64 (0)                      // 128
};

#define uson_chr_escape(c) uson_escape_tbl[c]

// -----------------------------------------------------------------------------
// Object property key hashing
// -----------------------------------------------------------------------------

static inline uint json_hash_key (const u8* str, size_t len)
{
#if JSON(HASH_KEYS)
  uf32 hash = hash_fnv1a_fast (str, len);
  return hash_fold (hash, 16) | len;
#else
  return len;
#endif
}

// -----------------------------------------------------------------------------
// Inline memory functions for small strings
// -----------------------------------------------------------------------------

static inline void json_str_copy (u8* restrict dst, const u8* restrict src, size_t size)
{
  #define T_RESTRICT

  #include <quantum/string/buffer/copy/generic.c>
}

// -----------------------------------------------------------------------------

static inline void json_str_move_left (u8* dst, const u8* src, size_t size)
{
  #include <quantum/string/buffer/copy/generic.c>
}

static inline void json_str_move_right (u8* dst, const u8* src, size_t size)
{
  #include <quantum/string/buffer/rcopy/generic.c>
}

// -----------------------------------------------------------------------------

static inline void json_str_fill (u8* buf, size_t size, char_t chr)
{
  #include <quantum/string/buffer/fill/generic.c>
}

// -----------------------------------------------------------------------------

static inline bool json_str_equal (const u8* buf1, const u8* buf2, size_t size)
{
  #define T_EQUALITY

  #include <quantum/string/buffer/compare/generic.c>
}

static inline bool json_stri_nequal (const u8* str1, const u8* str2, size_t max)
{
  #define T_EQUALITY
  #define T_LIMIT

  #include <quantum/string/implicit/buffer/compare/generic.c>
}

// -----------------------------------------------------------------------------

#endif
